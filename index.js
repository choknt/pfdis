import 'dotenv/config';
import express from 'express';
import mongoose from 'mongoose';
import PlayFab from 'playfab-sdk';
import {
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ChannelType,
  Client,
  EmbedBuilder,
  Events,
  GatewayIntentBits,
  InteractionType,
  ModalBuilder,
  Partials,
  REST,
  Routes,
  SlashCommandBuilder,
  TextInputBuilder,
  TextInputStyle
} from 'discord.js';

// ===== ENV =====
const TOKEN = process.env.DISCORD_TOKEN;
const CLIENT_ID = process.env.DISCORD_CLIENT_ID;
const MONGO_URI = process.env.MONGO_URI;
const TITLE_ID = process.env.PLAYFAB_TITLE_ID;
const PRIMARY_GUILD_ID = process.env.PRIMARY_GUILD_ID;
const ADMIN_ROLE_ID_A = process.env.ADMIN_ROLE_ID_A;
const LOG_CHANNEL_ID_A = process.env.LOG_CHANNEL_ID_A;
const FORM_IMAGE_URL = process.env.FORM_IMAGE_URL;
const PORT = process.env.PORT || 3000;

for (const [k,v] of Object.entries({TOKEN,CLIENT_ID,MONGO_URI,TITLE_ID,PRIMARY_GUILD_ID,ADMIN_ROLE_ID_A,LOG_CHANNEL_ID_A})){
  if(!v){ console.error('‚ùå Missing env:', k); process.exit(1); }
}

// ===== Mongo Model =====
const Verify = mongoose.model(
  'Verify',
  new mongoose.Schema({
    discordId: { type: String, index: true, unique: true },
    discordName: { type: String, index: true },
    playFabId: { type: String, index: true },
    playerName: String
  }, { timestamps: true })
);

// ===== PlayFab (Client API) =====
PlayFab.settings.titleId = TITLE_ID;
let playfabReady = false;
function ensurePlayFabLogin(){
  if (playfabReady) return Promise.resolve(true);
  return new Promise((resolve)=>{
    const CustomId = 'bot-' + Math.random().toString(36).slice(2);
    PlayFab.PlayFabClient.LoginWithCustomID({ TitleId: TITLE_ID, CustomId, CreateAccount: true }, (err)=>{
      if (err) { console.error('‚ùå PlayFab login failed:', err); return resolve(false); }
      playfabReady = true; resolve(true);
    });
  });
}
async function getAccountInfoByPlayFabId(playFabId){
  const ok = await ensurePlayFabLogin();
  if(!ok) return { found:false, error:'PlayFab session not ready' };
  return new Promise((resolve)=>{
    PlayFab.PlayFabClient.GetAccountInfo({ PlayFabId: playFabId }, (err, res)=>{
      if (err) return resolve({ found:false, error: err?.errorMessage || 'GetAccountInfo failed' });
      const a = res?.data?.AccountInfo || {};
      resolve({
        found: true,
        displayName: a?.TitleInfo?.DisplayName || null,
        username: a?.Username || null
      });
    });
  });
}

// ===== Discord Client =====
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMembers, // ‡πÄ‡∏õ‡∏¥‡∏î Server Members Intent ‡πÉ‡∏ô Dev Portal
    GatewayIntentBits.DirectMessages
  ],
  partials: [Partials.Channel]
});

// ===== Server A helpers =====
async function isAdminInPrimaryGuild(userId){
  try {
    const guildA = await client.guilds.fetch(PRIMARY_GUILD_ID);
    const memberA = await guildA.members.fetch(userId);
    return memberA.roles.cache.has(ADMIN_ROLE_ID_A);
  } catch(e){ console.warn('isAdminInPrimaryGuild error:', e?.message); return false; }
}
async function logToPrimaryGuild(embed){
  try {
    const ch = await client.channels.fetch(LOG_CHANNEL_ID_A);
    if (ch?.type === ChannelType.GuildText) await ch.send({ embeds: [embed] });
  } catch(e){ console.warn('logToPrimaryGuild error:', e?.message); }
}

// ===== UI builders =====
function buildFormEmbed(){
  const e = new EmbedBuilder()
    .setTitle('‡πÇ‡∏õ‡∏£‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô')
    .setDescription('‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° **‡πÑ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì** ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏Å **PlayFabId**\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: `25CDF5286DC38DAD`')
    .setColor(0x5865f2);
  if (FORM_IMAGE_URL) e.setImage(FORM_IMAGE_URL);
  return e;
}
function buildVerifyButtonRow(){
  return new ActionRowBuilder().addComponents(
    new ButtonBuilder().setCustomId('open_verify_modal').setLabel('‡πÑ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì').setStyle(ButtonStyle.Primary)
  );
}
function buildVerifyModal(customId='verify_modal', title='‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (PlayFab)'){
  const modal = new ModalBuilder().setCustomId(customId).setTitle(title);
  const input = new TextInputBuilder()
    .setCustomId('playfab_id')
    .setLabel('‡πÇ‡∏õ‡∏£‡∏î‡∏õ‡πâ‡∏≠‡∏ô PlayFabId ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏ä‡πà‡∏ô 25CDF5286DC38DAD)')
    .setPlaceholder('‡πÄ‡∏ä‡πà‡∏ô 25CDF5286DC38DAD')
    .setStyle(TextInputStyle.Short)
    .setRequired(true)
    .setMaxLength(32);
  modal.addComponents(new ActionRowBuilder().addComponents(input));
  return modal;
}
function buildUserEmbed({ discordId, discordName, playFabId, playerName }){
  return new EmbedBuilder()
    .setTitle('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ú‡πà‡∏≤‡∏ô')
    .setColor(0x2ecc71)
    .addFields(
      { name:'‡πÑ‡∏≠‡∏î‡∏µ‡πÄ‡∏Å‡∏°', value: playFabId || '‚Äî', inline:false },
      { name:'‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô', value: playerName || '‚Äî', inline:false },
      { name:'‡πÑ‡∏≠‡∏î‡∏µ Discord', value: discordId, inline:true },
      { name:'‡∏ä‡∏∑‡πà‡∏≠ Discord', value: discordName || '‚Äî', inline:true }
    ).setTimestamp();
}
function buildFailEmbed(playFabId){
  return new EmbedBuilder()
    .setTitle('‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô')
    .setDescription(`‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö **${playFabId}** ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`)
    .setColor(0xe74c3c)
    .setTimestamp();
}

// ===== Slash Commands =====
const commands = [
  // /send-form = ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô handler ‡πÅ‡∏•‡∏∞‡∏•‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÉ‡∏Ñ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó‡πÇ‡∏î‡∏¢‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏ù‡∏±‡πà‡∏á Portal)
  new SlashCommandBuilder().setName('send-form').setDescription('‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)').setDMPermission(true),
  new SlashCommandBuilder().setName('show').setDescription('‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì').setDMPermission(true),
  new SlashCommandBuilder().setName('edit').setDescription('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ID ‡πÄ‡∏Å‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì').addStringOption(o=>o.setName('playerid').setDescription('‡πÑ‡∏≠‡∏î‡∏µ‡πÉ‡∏´‡∏°‡πà (PlayFabId)').setRequired(true)).setDMPermission(true),
  new SlashCommandBuilder().setName('py-info').setDescription('‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (‡∏ï‡∏£‡∏ß‡∏à‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÉ‡∏ô Server A)').addStringOption(o=>o.setName('playerid').setDescription('PlayFabId').setRequired(true)).setDMPermission(true),
  new SlashCommandBuilder().setName('admin-show').setDescription('‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏ï‡∏£‡∏ß‡∏à‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÉ‡∏ô Server A)').addStringOption(o=>o.setName('discord_name').setDescription('‡∏ä‡∏∑‡πà‡∏≠ Discord ‡πÄ‡∏ä‡πà‡∏ô user#1234').setRequired(true)).setDMPermission(true),
  new SlashCommandBuilder().setName('admin-edit').setDescription('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏ï‡∏£‡∏ß‡∏à‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÉ‡∏ô Server A)').addStringOption(o=>o.setName('discord_name').setDescription('‡∏ä‡∏∑‡πà‡∏≠ Discord').setRequired(true)).addStringOption(o=>o.setName('playerid').setDescription('‡πÑ‡∏≠‡∏î‡∏µ‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà (PlayFabId)').setRequired(true)).setDMPermission(true)
].map(c=>c.toJSON());

async function registerCommands(){
  const rest = new REST({ version:'10' }).setToken(TOKEN);
  // Global (‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÉ‡∏ô DM ‡πÅ‡∏•‡∏∞‡∏ó‡∏∏‡∏Å‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï)
  await rest.put(Routes.applicationCommands(CLIENT_ID), { body: commands });
  console.log('‚úÖ Global commands registered');
}

// ===== Events =====
client.once(Events.ClientReady, async ()=>{
  console.log(`ü§ñ Logged in as ${client.user.tag}`);
  await registerCommands();
});

client.on(Events.InteractionCreate, async (i)=>{
  try{
    if (i.isChatInputCommand()){
      const name = i.commandName;

      if (name === 'send-form'){
        const ok = await isAdminInPrimaryGuild(i.user.id);
        if (!ok) return i.reply({ content: '‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô', ephemeral: true });
        // ‡∏™‡πà‡∏á embed + ‡∏õ‡∏∏‡πà‡∏°
        await i.reply({ embeds:[buildFormEmbed()], components:[new ActionRowBuilder().addComponents(new ButtonBuilder().setCustomId('open_verify_modal').setLabel('‡πÑ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì').setStyle(ButtonStyle.Primary))], ephemeral: !i.guild });
        return;
      }

      if (name === 'show'){
        const doc = await Verify.findOne({ discordId: i.user.id });
        if (!doc) return i.reply({ content:'‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì', ephemeral:true });
        return i.reply({ embeds:[buildUserEmbed(doc)], ephemeral:true });
      }

      if (name === 'edit'){
        const pid = i.options.getString('playerid', true).trim();
        const info = await getAccountInfoByPlayFabId(pid);
        if (!info.found) return i.reply({ embeds:[buildFailEmbed(pid)], ephemeral:true });
        await Verify.findOneAndUpdate(
          { discordId: i.user.id },
          { discordId: i.user.id, discordName: i.user.tag || i.user.username, playFabId: pid, playerName: info.displayName || info.username || null },
          { upsert:true, new:true }
        );
        return i.reply({ content:`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô ${info.displayName || info.username || '‚Äî'}`, ephemeral:true });
      }

      if (name === 'py-info'){
        const ok = await isAdminInPrimaryGuild(i.user.id);
        if (!ok) return i.reply({ content:'‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å', ephemeral:true });
        const pid = i.options.getString('playerid', true);
        const info = await getAccountInfoByPlayFabId(pid);
        if (!info.found) return i.reply({ content:'‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô', ephemeral:true });
        const embed = new EmbedBuilder().setTitle('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (Server A)').addFields(
          { name:'‡πÑ‡∏≠‡∏î‡∏µ‡πÄ‡∏Å‡∏°', value: pid, inline:true },
          { name:'‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô', value: info.displayName || info.username || '‚Äî', inline:true }
        ).setColor(0x00a8ff).setTimestamp();
        return i.reply({ embeds:[embed], ephemeral:true });
      }

      if (name === 'admin-show'){
        const ok = await isAdminInPrimaryGuild(i.user.id);
        if (!ok) return i.reply({ content:'‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å', ephemeral:true });
        const dname = i.options.getString('discord_name', true);
        const doc = await Verify.findOne({ discordName: dname });
        if (!doc) return i.reply({ content:'‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ', ephemeral:true });
        return i.reply({ embeds:[buildUserEmbed(doc)], ephemeral:true });
      }

      if (name === 'admin-edit'){
        const ok = await isAdminInPrimaryGuild(i.user.id);
        if (!ok) return i.reply({ content:'‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å', ephemeral:true });
        const dname = i.options.getString('discord_name', true);
        const newPid = i.options.getString('playerid', true);
        const info = await getAccountInfoByPlayFabId(newPid);
        if (!info.found) return i.reply({ embeds:[buildFailEmbed(newPid)], ephemeral:true });
        const updated = await Verify.findOneAndUpdate(
          { discordName: dname },
          { playFabId: newPid, playerName: info.displayName || info.username || null },
          { new:true }
        );
        if (!updated) return i.reply({ content:'‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', ephemeral:true });
        return i.reply({ content:`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ${dname} ‡πÄ‡∏õ‡πá‡∏ô ${updated.playerName || '‚Äî'}`, embeds:[buildUserEmbed(updated)], ephemeral:true });
      }
    }

    if (i.isButton()){
      if (i.customId === 'open_verify_modal'){
        // ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏°‡∏î‡∏≠‡∏•
        return i.showModal(buildVerifyModal());
      }
    }

    if (i.type === InteractionType.ModalSubmit){
      if (i.customId === 'verify_modal'){
        const pfId = i.fields.getTextInputValue('playfab_id').trim();
        await i.deferReply({ ephemeral:true });
        const info = await getAccountInfoByPlayFabId(pfId);
        if (!info.found){
          const fail = buildFailEmbed(pfId);
          try { await i.user.send({ embeds:[fail] }); } catch {}
          return i.editReply({ embeds:[fail] });
        }
        const doc = await Verify.findOneAndUpdate(
          { discordId: i.user.id },
          { discordId: i.user.id, discordName: i.user.tag || i.user.username, playFabId: pfId, playerName: info.displayName || info.username || null },
          { upsert:true, new:true }
        );
        const success = buildUserEmbed(doc);
        try { await i.user.send({ embeds:[success] }); } catch {}
        await logToPrimaryGuild(success);
        return i.editReply({ content:'‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ', embeds:[success] });
      }
    }
  }catch(e){
    console.error('Interaction error:', e);
    if (i.isRepliable()) { try { await i.reply({ content:'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö', ephemeral:true }); } catch {} }
  }
});

// ===== Health server =====
const app = express();
app.get('/', (_req, res) => res.status(200).send('OK'));
app.get('/health', (_req, res) => res.status(200).json({ status:'ok', time:new Date().toISOString() }));
app.listen(PORT, ()=> console.log('HTTP health server on', PORT));

// ===== Bootstrap =====
(async ()=>{
  try{
    await mongoose.connect(MONGO_URI);
    console.log('‚úÖ Mongo connected');
    const ok = await ensurePlayFabLogin();
    if (!ok) throw new Error('PlayFab login failed');
    console.log('‚úÖ PlayFab session ready');
    await client.login(TOKEN);
  }catch(e){
    console.error('Startup error:', e);
    process.exit(1);
  }
})();


‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Ñ‡∏∑‡∏≠‡∏°‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á .setDescription(...) ‡∏ó‡∏≥‡πÉ‡∏´‡πâ Node (ESM) ‡πÄ‡∏à‡∏≠ Invalid or unexpected token.

‡∏ú‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ô‡πÅ‡∏Ñ‡∏ô‡∏ß‡∏≤‡∏™‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡πÇ‡∏î‡∏¢‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ \n (‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô \\n ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ \n ‡∏à‡∏£‡∏¥‡∏á‡∏ï‡∏≠‡∏ô‡∏£‡∏±‡∏ô) ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:

.setDescription('‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° **‡πÑ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì** ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏Å **PlayFabId**\\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: `25CDF5286DC38DAD`')

‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡πÜ

1. commit/push ‡πÇ‡∏Ñ‡πâ‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î


2. ‡∏Å‡∏î Redeploy ‡∏ö‡∏ô Render


3. ‡∏î‡∏π log ‡∏Ñ‡∏ß‡∏£‡∏ú‡πà‡∏≤‡∏ô‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡∏ï‡πà‡∏≠‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô:

‚úÖ Mongo connected

‚úÖ PlayFab session ready

ü§ñ Logged in as <BotName>

HTTP health server on <PORT>




‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ error ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÇ‡∏ú‡∏•‡πà‡∏°‡∏≤‡∏≠‡∏µ‡∏Å (‡πÄ‡∏ä‡πà‡∏ô import, perms, intents) ‡πÅ‡∏õ‡∏∞ log ‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡∏ú‡∏°‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡∏ï‡πà‡∏≠‡∏à‡∏ô‡∏£‡∏±‡∏ô‡∏ô‡∏¥‡πà‡∏á‡∏Ñ‡∏£‡∏±‡∏ö üí™

